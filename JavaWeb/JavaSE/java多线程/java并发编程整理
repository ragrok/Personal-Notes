java多线程学习路线，java多线程编程实战指南-juc类库

进程：程序向操作系统申请资源的基本单位。 
线程：进程可以执行的最小单位。
任务：线程所要完成的计算。 task

java 同步的三大特性：原子性，可见性，有序性。

串行：依次运行，并发：交替进行，并发：并行，时间是花费最大任务的时间。

java两种方式来保证原子性：软件层面使用lock关键字，由于锁具有排他性，能够保障一个共享变量在任意时刻只能被一个线程访问。硬件层面使用cas指令实现，他们的思路是一致的，只是实现方式不一样。 

可见性是由于多线程上下文切换时引起的，一个线程对寄存器变量的修改会被作为该线程的线程上下文保存起来，这导致了其他线程无法看到该线程对改变量的修改。

临界区的概念：一个访问共用资源的程序片段，而这些资源又无法同时被多个线程访问。

锁的概念：某一段时间内只允许一个线程访问某一个资源的机制。

锁的类型：无锁，偏向锁，轻量级锁，重量级锁。

锁的特性：锁只能升级，例如从偏向锁升级为轻量级锁，而不能降级。

java锁的类型：内部锁，显示锁，读写锁。

java内存自动分配和垃圾收集技术是java和c以及c++比较大的不同点。

java判断对象是否需要回收的算法：可达性分析。
java常用垃圾收集算法：

1. 标记-清理算法，后续的垃圾收集算法都是在它的基础上改进的，改算法不足有两个问题，一个是效率问题，标记和清除的效率不高，一个是空间问题，会产生不连续的碎片空间。
2. 复制算法 将内存分为大小相等的两块，每次使用其中一块，这块用完，将对象复制到另一块中，然后把用过的这块空间清理。
3. 标记-整理算法，内存用完之后，把幸存的对象往一端移动，然后清理边界以外的内存。
java垃圾收集采用分代收集的方法，新生代用复制算法，老年代用标记-清除算法或者标记-清理算法。

